{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;AAC9B,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ;AACrC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,SAAS;;AAEhC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC;;;;;AAKpC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC;EAC9B,WAAW,CAAC,CAAC,CAAC;IACZ,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACjB;;;;;;;;EAQA,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;;IAEvD,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK;IACzC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1B,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACzB,WAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI;MACvB,CAAC;IACH,CAAC;IACD,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;MAChC,EAAE,CAAC,CAAC,WAAW;IACjB,CAAC;IACD,WAAW,CAAC,GAAG,CAAC,IAAI;IACpB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;IACrB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC;EACvC;;;;;EAKA,SAAS,CAAC,MAAM,CAAC,CAAC;IAChB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;EAChB;AACF","file":"index.js","sourcesContent":["import { debuglog } from 'util'\nimport { Replaceable } from 'restream'\nimport Catchment from 'catchment'\n\nconst LOG = debuglog('@a-la/context')\n\n/**\n * A context for testing Ã  la transforms which will allow to use its `stream` property.\n */\nexport default class ALaContext {\n  constructor() {\n    this.config = {}\n  }\n  /**\n   * Create a Replaceable stream with a given rule or rules.\n   * @param {Rule|Rule[]} rules A rule or rules to use.\n   * @param {string} text The string to feed to the stream.\n   * @param {string[]} [eventKeys] Which events to listen to.\n   * @returns {ReturnType} Replaceable instance, string result and events map.\n   */\n  async stream(rules, text, eventKeys = []) {\n    if (!text) throw new Error('An input text is required.')\n\n    const replaceable = new Replaceable(rules)\n    replaceable.config = this.config\n    const events = eventKeys.reduce((acc, key) => ({ ...acc, [key]: [] }), {})\n    eventKeys.forEach((key) => {\n      replaceable.on(key, (data) => {\n        events[key].push(data)\n      })\n    })\n    const { promise } = new Catchment({\n      rs: replaceable,\n    })\n    replaceable.end(text)\n    const result = await promise\n    return { events, result, replaceable }\n  }\n  /**\n   * Set the `.config` property of the Replaceable stream.\n   * @param {Object} config\n   */\n  setConfig(config) {\n    this.config = config\n  }\n}\n\n/* documentary types.xml */\n/**\n * @typedef {import('restream').Rule} Rule\n *\n * @typedef {Object} ReturnType Replaceable instance, string result and events map.\n * @prop {Object.<string, any[]>} events Emitted events recorded against passed events keys.\n * @prop {string} result The caught output of a _Replaceable_ stream as a string.\n * @prop {Replaceable} replaceable The instance of a _Replaceable_ stream.\n */\n"]}